{"version":3,"file":"tv-infinity-scroll.js","sources":["../src/tv-infinity-scroll.js"],"sourcesContent":["import './css/styles.css'\nimport axios from 'axios'\n\n\n// Створи фільмотеку з популярними фільмами, для цього використай\n// https://developer.themoviedb.org/reference/trending-movies\n\n// Щоб отримати постер фільму потрібно підставити url з відповіді від бекенду та url з документації\n// https://developer.themoviedb.org/docs/image-basics\n\n// Відмалюй картки з фільмами\n// Приклад картки  => https://prnt.sc/Hi_iLLg7Nd1F\n\n// Реалізуй пагінацію\n// 1 Кнопка \"Load More\"\n// 2 Infinity scroll (https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API)\n\nconst BASE_URL = \"https://api.themoviedb.org/3\";\nconst END_POINT = \"/trending/movie/week\";\nconst API_KEY = \"345007f9ab440e5b86cef51be6397df1\";\n\n\nconst container = document.querySelector(\".js-movie-list\");\nconst guard = document.querySelector(\".js-guard\");\n\nconst options = {\n  root: null,\n  rootMargin: \"300px\",\n  threshold: 0,\n};\n\nconst observer = new IntersectionObserver(handlePagination, options);\n\nlet page = 1;\n\nasync function serviceMovie(page = 1) {\n    const { data } = await axios(`${BASE_URL}${END_POINT}`, {\n        params: {\n            api_key: API_KEY,\n            page\n        }\n    });\n    return data;\n}\n\nfunction createMarkup(arr) {\n    return arr.map(({ poster_path, release_date, vote_average, title }) => `\n        <li class=\"movie-card\">\n            <img src=\"https://image.tmdb.org/t/p/w300${poster_path}\" alt=\"${title}\"/>\n            <div class=\"movie-info\">\n                <h2>${title}</h2>\n                <p>Release Date: ${release_date}</p>\n                <p>Vote Average: ${vote_average}</p>\n            </div>\n        </li>\n    `).join(\"\");\n}\n\nserviceMovie(page)\n    .then(data => {\n        console.log(data);\n        container.insertAdjacentHTML(\"beforeend\", createMarkup(data.results));\n\n        if(data.page < data.total_pages) {\n            observer.observe(guard);\n        }\n    })\n    .catch(error => {\n        alert(error.message)\n    })\n\nfunction handlePagination(entries) {\n    entries.forEach(async (entry) => {\n        if (entry.isIntersecting) {\n            page++;\n\n            try {\n                const data = await serviceMovie(page);\n                container.insertAdjacentHTML(\"beforeend\", createMarkup(data.results));\n\n                if(data.page >= data.total_pages) {\n                    observer.unobserve(guard);\n                }\n            } catch(error) {\n                alert(error.message);\n            }\n        }\n    });\n}"],"names":["BASE_URL","END_POINT","API_KEY","container","guard","options","observer","handlePagination","page","serviceMovie","data","axios","createMarkup","arr","poster_path","release_date","vote_average","title","error","entries","entry"],"mappings":"oFAiBA,MAAMA,EAAW,+BACXC,EAAY,uBACZC,EAAU,mCAGVC,EAAY,SAAS,cAAc,gBAAgB,EACnDC,EAAQ,SAAS,cAAc,WAAW,EAE1CC,EAAU,CACd,KAAM,KACN,WAAY,QACZ,UAAW,CACb,EAEMC,EAAW,IAAI,qBAAqBC,EAAkBF,CAAO,EAEnE,IAAIG,EAAO,EAEX,eAAeC,EAAaD,EAAO,EAAG,CAClC,KAAM,CAAE,KAAAE,CAAM,EAAG,MAAMC,EAAM,GAAGX,CAAQ,GAAGC,CAAS,GAAI,CACpD,OAAQ,CACJ,QAASC,EACT,KAAAM,CACH,CACT,CAAK,EACD,OAAOE,CACX,CAEA,SAASE,EAAaC,EAAK,CACvB,OAAOA,EAAI,IAAI,CAAC,CAAE,YAAAC,EAAa,aAAAC,EAAc,aAAAC,EAAc,MAAAC,CAAK,IAAO;AAAA;AAAA,uDAEpBH,CAAW,UAAUG,CAAK;AAAA;AAAA,sBAE3DA,CAAK;AAAA,mCACQF,CAAY;AAAA,mCACZC,CAAY;AAAA;AAAA;AAAA,KAG1C,EAAE,KAAK,EAAE,CACd,CAEAP,EAAaD,CAAI,EACZ,KAAKE,GAAQ,CACV,QAAQ,IAAIA,CAAI,EAChBP,EAAU,mBAAmB,YAAaS,EAAaF,EAAK,OAAO,CAAC,EAEjEA,EAAK,KAAOA,EAAK,aAChBJ,EAAS,QAAQF,CAAK,CAElC,CAAK,EACA,MAAMc,GAAS,CACZ,MAAMA,EAAM,OAAO,CAC3B,CAAK,EAEL,SAASX,EAAiBY,EAAS,CAC/BA,EAAQ,QAAQ,MAAOC,GAAU,CAC7B,GAAIA,EAAM,eAAgB,CACtBZ,IAEA,GAAI,CACA,MAAME,EAAO,MAAMD,EAAaD,CAAI,EACpCL,EAAU,mBAAmB,YAAaS,EAAaF,EAAK,OAAO,CAAC,EAEjEA,EAAK,MAAQA,EAAK,aACjBJ,EAAS,UAAUF,CAAK,CAE/B,OAAOc,EAAO,CACX,MAAMA,EAAM,OAAO,CACtB,CACJ,CACT,CAAK,CACL"}